@model IEnumerable<MunicipalServices.Models.LocalEvent>
@{
    ViewData["Title"] = "Manage Events";
}

<div class="admin-content-wrapper">
    <!-- Header Section -->
    <div class="admin-page-header mb-4">
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
            <div>
                <h1 class="admin-title">
                    <i class="fas fa-calendar-alt me-3 text-primary"></i>
                    Manage Events
                </h1>
                <p class="admin-subtitle">
                    View, edit, and manage all local events and announcements
                </p>
            </div>
            <div class="header-actions">
                <a asp-action="CreateEvent" class="btn btn-success me-2">
                    <i class="fas fa-plus-circle me-2"></i>Create New Event
                </a>
                <a asp-action="Dashboard" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                </a>
            </div>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Filter and Search Section -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body p-3">
            <div class="row g-3 align-items-end">
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-search me-2"></i>Search Events
                    </label>
                    <input type="text" id="searchInput" class="form-control"
                           placeholder="Search by title, category, or location...">
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="fas fa-filter me-2"></i>Filter by Category
                    </label>
                    <select id="categoryFilter" class="form-select">
                        <option value="">All Categories</option>
                        <option value="Community">Community</option>
                        <option value="Education">Education</option>
                        <option value="Infrastructure">Infrastructure</option>
                        <option value="Health & Safety">Health & Safety</option>
                        <option value="Environment">Environment</option>
                        <option value="Recreation">Recreation</option>
                        <option value="Government">Government</option>
                        <option value="Emergency">Emergency</option>
                        <option value="Cultural">Cultural</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="fas fa-calendar me-2"></i>Filter by Status
                    </label>
                    <select id="statusFilter" class="form-select">
                        <option value="">All Events</option>
                        <option value="upcoming">Upcoming Events</option>
                        <option value="past">Past Events</option>
                        <option value="active">Active Only</option>
                        <option value="inactive">Inactive Only</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-secondary w-100" onclick="clearFilters()">
                        <i class="fas fa-times-circle me-1"></i>Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Events Statistics -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="stat-card stat-primary">
                <div class="stat-icon">
                    <i class="fas fa-calendar-alt"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="totalEvents">@Model.Count()</div>
                    <div class="stat-label">Total Events</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card stat-success">
                <div class="stat-icon">
                    <i class="fas fa-calendar-check"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="upcomingEvents">@Model.Count(e => e.EventDate >= DateTime.Now)</div>
                    <div class="stat-label">Upcoming</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card stat-warning">
                <div class="stat-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="highPriorityEvents">@Model.Count(e => e.Priority >= 4)</div>
                    <div class="stat-label">High Priority</div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card stat-info">
                <div class="stat-icon">
                    <i class="fas fa-eye"></i>
                </div>
                <div class="stat-content">
                    <div class="stat-number" id="totalViews">@Model.Sum(e => e.ViewCount)</div>
                    <div class="stat-label">Total Views</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Events List -->
    @if (Model.Any())
    {
        <div class="card border-0 shadow-lg">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">
                    <i class="fas fa-list me-2"></i>
                    All Events (<span id="filteredCount">@Model.Count()</span>)
                </h5>
            </div>
            <div class="card-body p-0">
                <div class="events-grid" id="eventsGrid">
                    @foreach (var eventItem in Model.OrderByDescending(e => e.CreatedAt))
                    {
                        <div class="event-item"
                             data-title="@eventItem.Title.ToLower()"
                             data-category="@eventItem.Category"
                             data-date="@eventItem.EventDate.Ticks"
                             data-priority="@eventItem.Priority"
                             data-active="@eventItem.IsActive.ToString().ToLower()"
                             data-location="@(eventItem.Location?.ToLower() ?? "")">

                            <div class="event-card">

                                <!-- Event Header -->
                                <div class="event-header">
                                    <div class="event-badges">
                                        @if (eventItem.IsActive)
                                        {
                                            <span class="badge bg-success">Active</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Inactive</span>
                                        }

                                        <span class="badge bg-primary">@eventItem.Category</span>

                                        <span class="badge @(eventItem.Priority >= 4 ? "bg-danger" : eventItem.Priority >= 3 ? "bg-warning text-dark" : "bg-success")">
                                            Priority @eventItem.Priority
                                        </span>
                                    </div>

                                    <h5 class="event-title">@eventItem.Title</h5>
                                </div>

                                <!-- Event Content -->
                                <div class="event-content">
                                    <div class="event-meta">
                                        <div class="meta-item">
                                            <i class="fas fa-calendar-alt text-primary"></i>
                                            <span>@eventItem.EventDate.ToString("MMM dd, yyyy")</span>
                                        </div>
                                        <div class="meta-item">
                                            <i class="fas fa-clock text-info"></i>
                                            <span>@eventItem.EventDate.ToString("h:mm tt")</span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(eventItem.Location))
                                        {
                                            <div class="meta-item">
                                                <i class="fas fa-map-marker-alt text-danger"></i>
                                                <span>@eventItem.Location</span>
                                            </div>
                                        }
                                    <div class="meta-item">
                                        <i class="fas fa-eye text-muted"></i>
                                        <span>@eventItem.ViewCount views</span>
                                    </div>
                                </div>

                                <p class="event-description">
                                    @(eventItem.Description.Length > 150 ?
                                                                    eventItem.Description.Substring(0, 150) + "..." :
                                                                    eventItem.Description)
                            </p>
                        </div>

                                <!-- Event Actions -->
                                <div class="event-actions">
                                    <a asp-action="EditEvent" asp-route-id="@eventItem.Id"
                                       class="btn btn-sm btn-outline-primary" title="Edit Event">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                </div>
                            </div>
                        </div>
                                }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm">
            <div class="card-body text-center py-5">
                <i class="fas fa-calendar-times fa-4x text-muted mb-3"></i>
                <h4 class="text-muted">No Events Found</h4>
                <p class="text-muted mb-4">You haven't created any events yet.</p>
                <a asp-action="CreateEvent" class="btn btn-success">
                    <i class="fas fa-plus-circle me-2"></i>Create Your First Event
                </a>
            </div>
        </div>
    }
</div>

<style>
    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
        padding: 1.5rem;
    }

    .event-item {
        transition: all 0.3s ease;
    }

    .event-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        overflow: hidden;
        height: 100%;
        display: flex;
        flex-direction: column;
        transition: all 0.3s ease;
    }

        .event-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
        }

    .event-image {
        height: 200px;
        overflow: hidden;
        position: relative;
    }

        .event-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

    .event-card:hover .event-image img {
        transform: scale(1.05);
    }

    .no-image {
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f1f3f4 0%, #e9ecef 100%);
        color: #6c757d;
    }

    .event-header {
        padding: 1rem 1rem 0;
    }

    .event-badges {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-bottom: 0.75rem;
    }

    .event-title {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0;
        line-height: 1.3;
        color: #2d3748;
    }

    .event-content {
        padding: 0 1rem;
        flex-grow: 1;
    }

    .event-meta {
        display: grid;
        gap: 0.5rem;
        margin-bottom: 0.75rem;
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        color: #6c757d;
    }

        .meta-item i {
            width: 16px;
        }

    .event-description {
        font-size: 0.9rem;
        color: #6c757d;
        line-height: 1.5;
        margin-bottom: 0;
    }

    .event-actions {
        padding: 1rem;
        border-top: 1px solid #e9ecef;
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        justify-content: center;
    }

        .event-actions .btn {
            flex: 1;
            min-width: auto;
            max-width: 120%;
        }

    @@media (max-width: 768px) {
        .events-grid

    {
        grid-template-columns: 1fr;
        padding: 1rem;
    }

    .event-actions {
        flex-direction: column;
    }

        .event-actions .btn {
            flex: none;
        }

    }
</style>

@section Scripts {
    <script>
        // Filter and search functionality
        function filterEvents() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;

            const eventItems = document.querySelectorAll('.event-item');
            let visibleCount = 0;

            eventItems.forEach(item => {
                const title = item.getAttribute('data-title');
                const category = item.getAttribute('data-category');
                const location = item.getAttribute('data-location');
                const isActive = item.getAttribute('data-active') === 'true';
                const eventDate = new Date(parseInt(item.getAttribute('data-date')));
                const isUpcoming = eventDate > new Date();

                let show = true;

                // Search filter
                if (searchTerm && !title.includes(searchTerm) &&
                    !category.toLowerCase().includes(searchTerm) &&
                    !location.includes(searchTerm)) {
                    show = false;
                }

                // Category filter
                if (categoryFilter && category !== categoryFilter) {
                    show = false;
                }

                // Status filter
                if (statusFilter) {
                    switch(statusFilter) {
                        case 'upcoming':
                            if (!isUpcoming) show = false;
                            break;
                        case 'past':
                            if (isUpcoming) show = false;
                            break;
                        case 'active':
                            if (!isActive) show = false;
                            break;
                        case 'inactive':
                            if (isActive) show = false;
                            break;
                    }
                }

                item.style.display = show ? 'block' : 'none';
                if (show) visibleCount++;
            });

            document.getElementById('filteredCount').textContent = visibleCount;
        }

        function clearFilters() {
            document.getElementById('searchInput').value = '';
            document.getElementById('categoryFilter').value = '';
            document.getElementById('statusFilter').value = '';
            filterEvents();
        }

        function confirmDelete(eventId, eventTitle) {
            document.getElementById('deleteEventId').value = eventId;
            document.getElementById('eventToDelete').textContent = eventTitle;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            // Add event listeners for filtering
            document.getElementById('searchInput').addEventListener('input', filterEvents);
            document.getElementById('categoryFilter').addEventListener('change', filterEvents);
            document.getElementById('statusFilter').addEventListener('change', filterEvents);

            // Form submission handling for delete
            document.getElementById('deleteForm').addEventListener('submit', function() {
                const submitBtn = this.querySelector('button[type="submit"]');
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';
                submitBtn.disabled = true;
            });
        });
    </script>
}